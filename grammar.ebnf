program = [{function}] mainfunction [{function}];

library = [{function}];

(* function *)

function = "function" identifier "(" [funcParamDeclList] ")" [":" funcReturnTypeDeclList] compundStmt;

mainfunction = "function" "main" "(" [funcParamDeclList] ")" [":" funcReturnTypeDeclList] compundStmt;

funcReturnTypeDeclList = funcReturnTypeDecl [{"," funcReturnTypeDecl}];
funcReturnTypeDecl = type ["=" expression];

funcParamDeclList = funcParamDecl [{"," funcParamDecl}];
funcParamDecl = identifier ":" type ["=" expression];

(* struct / enum / class / interface *)

structDecl = "struct" identifier "{" {function} "}";

(* variables *)

vardecl = vartype identifier (":=" expression | ":" type ["=" expression]) [{"," identifier (":=" expression | ":" type ["=" expression])}];

vartype = "var" | "const";

(* statements *)

statement = expressionStmt
          | compundStmt
          | returnStmt
          ;

expressionStmt =;
compundStmt = "{" [{statement}] "}";
returnStmt =;

(* expressions *)

expressionList = expression [{"," expression}];
expression =;