#ifndef LUVA_OPERATOR_H
#define LUVA_OPERATOR_H

typedef enum UnaryOperator {
	UNARY_OPERATOR_NEGATE,
	UNARY_OPERATOR_INCREMENT
	// ...
	// TODO: add missing unary operator types
} UnaryOperator;

typedef enum BinaryOperator {
	BINARY_OPERATOR_ADD,
	BINARY_OPERATOR_SUBTRACT,
	BINARY_OPERATOR_MULTIPLY,
	BINARY_OPERATOR_DIVIDE,
	BINARY_OPERATOR_MODULO,

	BINARY_OPERATOR_BITWISE_ARITHMETIC_LEFT_SHIFT,
	BINARY_OPERATOR_BITWISE_ARITHMETIC_RIGHT_SHIFT,
	BINARY_OPERATOR_BITWISE_AND,
	BINARY_OPERATOR_BITWISE_XOR,
	BINARY_OPERATOR_BITWISE_OR,

	BINARY_OPERATOR_LOGICAL_EQUAL,
	BINARY_OPERATOR_LOGICAL_NOT_EQUAL,
	BINARY_OPERATOR_LOGICAL_GREATER,
	BINARY_OPERATOR_LOGICAL_GREATER_OR_EQUAL,
	BINARY_OPERATOR_LOGICAL_LESS,
	BINARY_OPERATOR_LOGICAL_LESS_OR_EQUAL,

	BINARY_OPERATOR_LOGICAL_AND,
	BINARY_OPERATOR_LOGICAL_OR,
} BinaryOperator;

typedef enum AssignmentOperator {
	ASSIGNMENT_OPERATOR_DEFAULT,
	ASSIGNMENT_OPERATOR_ADD,
	ASSIGNMENT_OPERATOR_SUBTRACT,
	ASSIGNMENT_OPERATOR_MULTIPLY,
	ASSIGNMENT_OPERATOR_DIVIDE
	// ... 
	// TODO: add missing assignment operator types
} AssignmentOperator;

extern const char *BINARY_OPERATOR_TYPES[];

#endif